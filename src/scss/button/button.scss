// Button
//
// Displays a button
//
// TODO: Make sure buttons are reset first.
// Right now a `primary` button cannot be safely transformed into a `secondary` button
// Styles might overlap...
//
// Source: https://app.zeplin.io/project/5c7e04320037cd178eaf0ed8/screen/5c7e0be15c1db5628c0b4129

// @import '../colors/colors.scss';
// @import '../link/link.scss';
// @import '../border/border.scss';

@mixin button-variant($colors, $colors-pseudo, $text-style: false) {
	&, & a { @include colors($colors); }
	@if ($text-style != false) { @include text-style($text-style); }

	@content
	
	&:hover,
	&:active {
		&, & a { @include colors($colors-pseudo); }
	}
}

@mixin button($variant: null, $ext: true) {
	$padding-normal: calc(var(--spacer-16) * 0.75) calc(var(--spacer-16) * 2);
	$padding-small: var(--spacer-8) var(--spacer-16);
	
	@if ($ext == false) {
		cursor: pointer;
		text-align: center;
		justify-content: center;

		@include border(null, radius);

		a {
			@include link-as-button();
		}
	}

	@if ($variant == primary) {
		@include button-variant(inverted, white-on-red, body-caps) {
			a { padding: $padding-normal; }
		}
	}

	@if ($variant == secondary-grey) {
		@include button-variant(black-on-grey, white-on-red, body) {
			a { padding: $padding-normal; }
		}
	}

	@if ($variant == secondary-grey-2) {
		@include button-variant(black-on-grey-2, inverted, body) {
			a { padding: $padding-normal; }
		}
	}

	@if ($variant == secondary-red) {
		@include button-variant(white-on-red, inverted) {
			a { padding: $padding-normal; }
		}
	}

	@if ($variant == secondary-white) {
		@include button-variant(default, white-on-red) {
			a { padding: $padding-normal; }
		}
	}

	@if ($variant == small) {
		@include button-variant(inverted, white-on-red, tag) {
			a { padding: $padding-small; }
		}
	}

	@if ($variant == small-secondary-red) {
		@include button-variant(white-on-red, inverted, small-caps) {
			a { padding: $padding-small; }
		}
	}

	@if ($variant == disabled) {
		cursor: default;

		@include button-variant(grey-on-grey, grey-on-grey);
	}
}

.button {	
	@include button(null, false);
	
	&--primary {
		@include button(primary);
	}
}
